/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as QueueRouteImport } from './routes/queue'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SettingsGeneralRouteImport } from './routes/settings/general'
import { Route as SettingsAppearanceRouteImport } from './routes/settings/appearance'
import { Route as SettingsApiKeysRouteImport } from './routes/settings/api-keys'
import { Route as AuthSignupRouteImport } from './routes/auth.signup'
import { Route as AuthLoginRouteImport } from './routes/auth.login'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const QueueRoute = QueueRouteImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsGeneralRoute = SettingsGeneralRouteImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsAppearanceRoute = SettingsAppearanceRouteImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsApiKeysRoute = SettingsApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => SettingsRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/queue': typeof QueueRoute
  '/settings': typeof SettingsRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/settings/api-keys': typeof SettingsApiKeysRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/queue': typeof QueueRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/settings/api-keys': typeof SettingsApiKeysRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/queue': typeof QueueRoute
  '/settings': typeof SettingsRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/settings/api-keys': typeof SettingsApiKeysRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/queue'
    | '/settings'
    | '/auth/login'
    | '/auth/signup'
    | '/settings/api-keys'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/queue'
    | '/auth/login'
    | '/auth/signup'
    | '/settings/api-keys'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/queue'
    | '/settings'
    | '/auth/login'
    | '/auth/signup'
    | '/settings/api-keys'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  QueueRoute: typeof QueueRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/queue': {
      id: '/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/api-keys': {
      id: '/settings/api-keys'
      path: '/api-keys'
      fullPath: '/settings/api-keys'
      preLoaderRoute: typeof SettingsApiKeysRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettingsRouteChildren {
  SettingsApiKeysRoute: typeof SettingsApiKeysRoute
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsApiKeysRoute: SettingsApiKeysRoute,
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  QueueRoute: QueueRoute,
  SettingsRoute: SettingsRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
