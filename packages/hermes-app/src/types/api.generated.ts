/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Health
         * @description Get API health status.
         */
        get: operations["get_health_api_v1_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Detailed Health
         * @description Get detailed health information including dependencies.
         */
        get: operations["get_detailed_health_api_v1_health_detailed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Extract Video Info
         * @description Extract metadata and available formats for a video without downloading it.
         *     Useful for previewing video details and format options.
         */
        get: operations["extract_video_info_api_v1_info__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Download
         * @description Start a new video download.
         *
         *     This endpoint initiates a video download with the specified format and options.
         *     The download is processed asynchronously in the background.
         *
         *     **Format Selection:**
         *     The `format` parameter accepts various format specifications:
         *
         *     **Authentication:**
         *     This endpoint accepts both JWT tokens (from user login) and API keys.
         *     For API keys, both configured keys and database-stored keys are supported.
         *     - Quality selectors: `best`, `worst`, `bestvideo+bestaudio`
         *     - Resolution limits: `bestvideo[height<=720]+bestaudio`
         *     - Container preferences: `mp4`, `webm`, `mkv`
         *     - Audio-only: `bestaudio`, `bestaudio[ext=m4a]`
         *     - Specific format IDs: `137+140` (obtained from GET /info endpoint)
         *
         *     For a complete list of format options and detailed descriptions, see:
         *     **GET /api/v1/formats/** endpoint
         *
         *     **Workflow:**
         *     1. Call GET /info with the URL to preview available formats
         *     2. Call GET /formats to understand format selection syntax
         *     3. Call POST /download with your chosen format specification
         *     4. Poll GET /download/{id} to track download progress
         *
         *     **Examples:**
         *     ```json
         *     // Best quality (default)
         *     {"url": "https://youtube.com/watch?v=...", "format": "best"}
         *
         *     // Best video + audio up to 1080p
         *     {"url": "https://youtube.com/watch?v=...",
         *      "format": "bestvideo[height<=1080]+bestaudio"}
         *
         *     // Audio only in MP3
         *     {"url": "https://youtube.com/watch?v=...", "format": "bestaudio[ext=mp3]"}
         *
         *     // MP4 container preferred
         *     {"url": "https://youtube.com/watch?v=...", "format": "mp4"}
         *     ```
         *
         *     Returns:
         *         DownloadResponse: Download ID and initial status
         */
        post: operations["start_download_api_v1_download__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/download/{download_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Download Status
         * @description Get the status of a download.
         */
        get: operations["get_download_status_api_v1_download__download_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/download/{download_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Download
         * @description Cancel a running download.
         */
        post: operations["cancel_download_api_v1_download__download_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/download/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Batch Download
         * @description Start a batch download of multiple videos.
         *
         *     Downloads multiple videos with the same format specification applied to all.
         *     All downloads are processed asynchronously in the background.
         *
         *     **Format Selection:**
         *     The `format` parameter applies to all videos in the batch.
         *     See GET /api/v1/formats/ for available format options.
         *
         *     Common batch scenarios:
         *     - `"best"`: Best quality for all videos
         *     - `"bestaudio[ext=mp3]"`: Audio-only in MP3 format
         *     - `"bestvideo[height<=720]+bestaudio"`: All videos limited to 720p
         *
         *     Returns:
         *         BatchDownloadResponse: Batch ID and list of individual download IDs
         */
        post: operations["start_batch_download_api_v1_download_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download File
         * @description Download a specific file.
         */
        get: operations["download_file_api_v1_files_download_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Downloaded Files
         * @description List all files that have been downloaded and are currently stored.
         */
        get: operations["list_downloaded_files_api_v1_files__get"];
        put?: never;
        post?: never;
        /**
         * Delete Downloaded Files
         * @description Delete one or more downloaded files from storage.
         */
        delete: operations["delete_downloaded_files_api_v1_files__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/queue/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Download Queue
         * @description Get the current download queue with all pending, active, and recently completed downloads.
         */
        get: operations["get_download_queue_api_v1_queue__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/queue/cleanup-orphaned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cleanup Orphaned Downloads
         * @description Clean up orphaned download records where files no longer exist on disk.
         *
         *     This endpoint removes database records for downloads where the output_path
         *     file is missing from the filesystem. This can happen due to:
         *     - External file deletion
         *     - System crashes during deletion
         *     - Manual database operations
         *
         *     Use dry_run=true to preview what would be deleted without actually deleting.
         */
        post: operations["cleanup_orphaned_downloads_api_v1_queue_cleanup_orphaned_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/formats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Formats
         * @description Get information about supported video formats, codecs, and containers.
         *
         *     This endpoint provides comprehensive information about:
         *     - Supported video format extensions
         *     - Supported audio format extensions
         *     - Supported subtitle formats
         *     - Quality selection options
         *     - Common resolution options
         *     - Format selection guidelines
         *
         *     Useful for building format selection interfaces and understanding
         *     what format options are available for downloads.
         *
         *     Returns:
         *         FormatInfo: Comprehensive format information including video formats,
         *         audio formats, subtitle formats, and quality options.
         *
         *     Example:
         *         ```
         *         GET /api/v1/formats/
         *
         *         Response:
         *         {
         *             "video_formats": ["mp4", "webm", "mkv", "avi"],
         *             "audio_formats": ["mp3", "m4a", "ogg", "flac"],
         *             "subtitle_formats": ["vtt", "srt", "ass"],
         *             "quality_options": ["best", "worst", "bestvideo+bestaudio"],
         *             "resolution_options": ["360p", "480p", "720p", "1080p"],
         *             "format_notes": {
         *                 "best": "Select the best quality format (video+audio)"
         *             }
         *         }
         *         ```
         */
        get: operations["get_available_formats_api_v1_formats__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Authenticate user and return access token.
         */
        post: operations["login_api_v1_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Signup
         * @description Create new user account.
         */
        post: operations["signup_api_v1_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout user and blacklist current token.
         */
        post: operations["logout_api_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Refresh access token using refresh token.
         */
        post: operations["refresh_token_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get current authenticated user information.
         */
        get: operations["get_current_user_api_v1_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Profile
         * @description Update user profile (name, email, avatar, preferences).
         */
        patch: operations["update_profile_api_v1_auth_profile_patch"];
        trace?: never;
    };
    "/api/v1/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Password
         * @description Change user password. Requires current password for verification.
         */
        post: operations["change_password_api_v1_auth_change_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Api Keys
         * @description List all API keys for the authenticated user.
         */
        get: operations["list_api_keys_api_v1_auth_api_keys_get"];
        put?: never;
        /**
         * Create Api Key Endpoint
         * @description Create a new API key for the authenticated user.
         */
        post: operations["create_api_key_endpoint_api_v1_auth_api_keys_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/api-keys/{api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke Api Key
         * @description Revoke (deactivate) an API key.
         */
        delete: operations["revoke_api_key_api_v1_auth_api_keys__api_key_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Download History
         * @description Get download history with statistics.
         *
         *     Returns comprehensive download history including:
         *     - Individual download records with pagination
         *     - Overall statistics (success rate, average time, total size)
         *     - Daily breakdown of downloads
         *     - Popular extractors analysis
         *
         *     Filters:
         *     - `start_date`: Only include downloads after this date
         *     - `end_date`: Only include downloads before this date
         *     - `extractor`: Filter by specific extractor (e.g., youtube, vimeo)
         *     - `status`: Filter by final status (completed, failed, cancelled)
         *
         *     Returns paginated results with comprehensive statistics.
         */
        get: operations["get_download_history_api_v1_history__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Storage Info
         * @description Get storage usage information and cleanup recommendations.
         *
         *     Returns comprehensive storage information including:
         *     - Total, used, and free space
         *     - Usage percentage
         *     - Download and temp directory sizes
         *     - Cleanup recommendations with potential space savings
         *
         *     Use this endpoint to monitor disk usage and identify cleanup opportunities.
         */
        get: operations["get_storage_info_api_v1_storage__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Api Statistics
         * @description Get API usage statistics.
         *
         *     Returns comprehensive statistics including:
         *     - Total downloads and success rates
         *     - Average download times
         *     - Bandwidth usage
         *     - Popular extractors
         *     - Error breakdown
         *     - Peak usage hours
         *
         *     Time periods:
         *     - `day`: Last 24 hours
         *     - `week`: Last 7 days (default)
         *     - `month`: Last 30 days
         *     - `year`: Last 365 days
         */
        get: operations["get_api_statistics_api_v1_stats__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/timeline/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Timeline Stats
         * @description Get timeline data for charts and visualizations.
         *
         *     Returns daily aggregated statistics for the specified period or date range.
         *     Perfect for creating charts showing downloads over time.
         *
         *     Time periods:
         *     - `day`: Last 24 hours
         *     - `week`: Last 7 days (default)
         *     - `month`: Last 30 days
         *     - `year`: Last 365 days
         *
         *     Date filters override period selection.
         */
        get: operations["get_timeline_stats_api_v1_timeline__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/timeline/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Timeline Summary
         * @description Get summary statistics for the timeline period.
         *
         *     Returns aggregated metrics including totals, averages, and trends
         *     for the specified time period.
         */
        get: operations["get_timeline_summary_api_v1_timeline_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cleanup/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cleanup Downloads
         * @description Clean up old downloads and temporary files.
         *
         *     This endpoint allows manual cleanup of:
         *     - Old download files (based on age)
         *     - Failed download attempts
         *     - Temporary download files
         *
         *     Use `dry_run=true` to preview what would be deleted without actually deleting.
         *
         *     Parameters:
         *     - `older_than_days`: Delete files older than this many days
         *     - `delete_failed_downloads`: Include failed download records
         *     - `delete_temp_files`: Include temporary files
         *     - `max_files_to_delete`: Safety limit on number of files
         *     - `dry_run`: Preview mode (no actual deletion)
         *
         *     Returns statistics on files deleted and space freed.
         */
        post: operations["cleanup_downloads_api_v1_cleanup__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cleanup/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cleanup Expired Tokens
         * @description Clean up expired tokens from the blacklist.
         *
         *     This endpoint removes tokens that have already expired and are no longer
         *     needed in the blacklist. Helps keep the blacklist table size manageable.
         *
         *     Parameters:
         *     - `dry_run`: Preview mode (no actual deletion)
         *
         *     Returns statistics on tokens deleted.
         */
        post: operations["cleanup_expired_tokens_api_v1_cleanup_tokens_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Configuration
         * @description Get current API configuration.
         *
         *     Returns all configurable settings including:
         *     - Download defaults (format, subtitles, thumbnails)
         *     - Performance settings (concurrency, retries, timeout)
         *     - Storage settings (directories, cleanup)
         *     - API settings (rate limits, debug mode)
         *
         *     Note: Sensitive settings like secret keys are not exposed.
         */
        get: operations["get_configuration_api_v1_config__get"];
        /**
         * Update Configuration
         * @description Update API configuration.
         *
         *     Updates runtime configuration settings. Only provided fields will be updated.
         *
         *     **Note**: Configuration changes are runtime-only and will be reset on restart.
         *     For persistent changes, update environment variables or configuration files.
         *
         *     **Supported Updates**:
         *     - Download defaults
         *     - Performance settings
         *     - Cleanup settings
         *     - Rate limits
         *
         *     **Not Supported** (require restart):
         *     - Database URLs
         *     - Secret keys
         *     - Core directories (requires file system changes)
         *
         *     Returns the updated configuration.
         */
        put: operations["update_configuration_api_v1_config__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Event Stream
         * @description SSE endpoint for real-time updates.
         *
         *     Streams events from Redis pub/sub channels to connected clients.
         *     Automatically reconnects on disconnect with Last-Event-ID support.
         *
         *     **Authentication:**
         *     Requires ephemeral SSE token from POST /api/v1/events/token.
         *     Pass token as query param: `/api/v1/events/stream?token=SSE_TOKEN`
         *
         *     **Security:**
         *     - SSE token is ephemeral (5-60 minutes TTL)
         *     - Scoped to specific resources
         *     - Read-only permissions
         *     - Automatically expires
         *
         *     **Channels:**
         *     - `download:updates` - Download progress updates
         *     - `queue:updates` - Queue status changes
         *     - `system:notifications` - System-wide notifications
         *
         *     **Example:**
         *     ```javascript
         *     // Step 1: Get SSE token (secure - uses main JWT in header)
         *     const { token } = await fetch('/api/v1/events/token', {
         *       method: 'POST',
         *       headers: { 'Authorization': `Bearer ${mainJWT}` },
         *       body: JSON.stringify({ scope: 'queue', ttl: 600 })
         *     }).then(r => r.json());
         *
         *     // Step 2: Connect with SSE token
         *     const eventSource = new EventSource(
         *       `/api/v1/events/stream?token=${token}&channels=download:updates,queue:updates`
         *     );
         *
         *     eventSource.addEventListener('download_progress', (event) => {
         *       const data = JSON.parse(event.data);
         *       console.log('Download progress:', data);
         *     });
         *     ```
         */
        get: operations["event_stream_api_v1_events_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/downloads/{download_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Events
         * @description SSE endpoint for a specific download's events.
         *
         *     Streams only events related to the specified download ID.
         *
         *     **Authentication:**
         *     Requires ephemeral SSE token scoped to this download.
         *     Get token from POST /api/v1/events/token with scope `download:{download_id}`
         *
         *     **Example:**
         *     ```javascript
         *     // Step 1: Get SSE token for this specific download
         *     const { token } = await fetch('/api/v1/events/token', {
         *       method: 'POST',
         *       headers: { 'Authorization': `Bearer ${mainJWT}` },
         *       body: JSON.stringify({
         *         scope: `download:${downloadId}`,
         *         ttl: 600  // 10 minutes
         *       })
         *     }).then(r => r.json());
         *
         *     // Step 2: Connect to SSE with scoped token
         *     const eventSource = new EventSource(
         *       `/api/v1/events/downloads/${downloadId}?token=${token}`
         *     );
         *
         *     eventSource.addEventListener('download_progress', (event) => {
         *       const data = JSON.parse(event.data);
         *       updateProgressBar(data.progress);
         *     });
         *     ```
         */
        get: operations["download_events_api_v1_events_downloads__download_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Queue Events
         * @description SSE endpoint for queue updates.
         *
         *     Streams queue-related events (additions, removals, status changes).
         *
         *     **Authentication:**
         *     Requires ephemeral SSE token scoped to 'queue'.
         *     Get token from POST /api/v1/events/token with scope `queue`
         *
         *     **Example:**
         *     ```javascript
         *     // Step 1: Get SSE token for queue updates
         *     const { token } = await fetch('/api/v1/events/token', {
         *       method: 'POST',
         *       headers: { 'Authorization': `Bearer ${mainJWT}` },
         *       body: JSON.stringify({
         *         scope: 'queue',
         *         ttl: 600  // 10 minutes
         *       })
         *     }).then(r => r.json());
         *
         *     // Step 2: Connect to SSE with queue token
         *     const eventSource = new EventSource(`/api/v1/events/queue?token=${token}`);
         *
         *     eventSource.addEventListener('queue_update', (event) => {
         *       const data = JSON.parse(event.data);
         *       refreshQueue();
         *     });
         *     ```
         */
        get: operations["queue_events_api_v1_events_queue_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stats Events
         * @description SSE endpoint for statistics updates.
         *
         *     Streams real-time statistics updates including API stats, download metrics, and analytics data.
         *
         *     **Authentication:**
         *     Requires ephemeral SSE token scoped to 'stats'.
         *     Get token from POST /api/v1/events/token with scope `stats`
         *
         *     **Example:**
         *     ```javascript
         *     // Step 1: Get SSE token for stats updates
         *     const { token } = await fetch('/api/v1/events/token', {
         *       method: 'POST',
         *       headers: { 'Authorization': `Bearer ${mainJWT}` },
         *       body: JSON.stringify({
         *         scope: 'stats',
         *         ttl: 600  // 10 minutes
         *       })
         *     }).then(r => r.json());
         *
         *     // Step 2: Connect to SSE with stats token
         *     const eventSource = new EventSource(`/api/v1/events/stats?token=${token}`);
         *
         *     eventSource.addEventListener('stats_update', (event) => {
         *       const data = JSON.parse(event.data);
         *       updateStats(data);
         *     });
         *     ```
         */
        get: operations["stats_events_api_v1_events_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Sse Token
         * @description Create ephemeral SSE token for secure, scoped SSE connections.
         *
         *     This endpoint solves the security issue of passing JWT tokens in query parameters
         *     by generating short-lived, scoped, read-only tokens specifically for SSE connections.
         *
         *     **Authentication:**
         *     Requires main JWT token in Authorization header (secure).
         *
         *     **Token Properties:**
         *     - **Scoped**: Limited to specific resource (e.g., `download:abc-123`, `queue`)
         *     - **Short-lived**: TTL 60s - 3600s (default 5 minutes)
         *     - **Read-only**: Cannot trigger downloads or modify data
         *     - **Revocable**: Automatically expires via Redis TTL
         *
         *     **Usage:**
         *     1. Call this endpoint with main JWT to get SSE token
         *     2. Use SSE token to connect to SSE endpoints
         *     3. Token authenticates the connection, updates flow continuously
         *     4. Token auto-expires or is revoked when task completes
         *
         *     **Example:**
         *     ```javascript
         *     // Step 1: Get SSE token (uses main JWT in header - secure!)
         *     const response = await fetch('/api/v1/events/token', {
         *       method: 'POST',
         *       headers: {
         *         'Authorization': `Bearer ${mainJWT}`,
         *         'Content-Type': 'application/json'
         *       },
         *       body: JSON.stringify({
         *         scope: 'download:abc-123',
         *         ttl: 600  // 10 minutes
         *       })
         *     });
         *     const { token } = await response.json();
         *
         *     // Step 2: Connect to SSE with ephemeral token (in query - acceptable)
         *     const eventSource = new EventSource(
         *       `/api/v1/events/downloads/abc-123?token=${token}`
         *     );
         *     ```
         *
         *     **Scopes:**
         *     - `download:<download_id>` - Single download progress
         *     - `queue` - Queue updates
         *     - `system` - System notifications
         */
        post: operations["create_sse_token_api_v1_events_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sse Health
         * @description Health check endpoint for SSE service.
         *
         *     Returns current SSE connection metrics including active connections,
         *     maximum allowed connections, and heartbeat interval.
         */
        get: operations["sse_health_api_v1_events_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health
         * @description Basic health check endpoint (alias for health-check).
         */
        get: operations["health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Basic health check endpoint.
         */
        get: operations["health_check_health_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApiKeyCreate */
        ApiKeyCreate: {
            /**
             * Name
             * @description API key name
             */
            name: string;
            /** Permissions */
            permissions?: string[];
            /** Expires At */
            expires_at?: string | null;
        };
        /** ApiKeyListResponse */
        ApiKeyListResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Permissions */
            permissions: string[];
            /** Rate Limit */
            rate_limit: number;
            /** Is Active */
            is_active: boolean;
            /** Created At */
            created_at: string;
            /** Last Used */
            last_used: string | null;
            /** Expires At */
            expires_at: string | null;
        };
        /** ApiKeyResponse */
        ApiKeyResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Key */
            key: string;
            /** Permissions */
            permissions: string[];
            /** Rate Limit */
            rate_limit: number;
            /** Is Active */
            is_active: boolean;
            /** Created At */
            created_at: string;
            /** Last Used */
            last_used: string | null;
            /** Expires At */
            expires_at: string | null;
        };
        /**
         * ApiStatistics
         * @description API usage statistics.
         */
        ApiStatistics: {
            /**
             * Period
             * @description Statistics period (day, week, month, year)
             */
            period: string;
            /**
             * Total Downloads
             * @description Total downloads in period
             */
            total_downloads: number;
            /**
             * Successful Downloads
             * @description Successful downloads
             */
            successful_downloads: number;
            /**
             * Failed Downloads
             * @description Failed downloads
             */
            failed_downloads: number;
            /**
             * Success Rate
             * @description Success rate (0.0 to 1.0)
             */
            success_rate: number;
            /**
             * Average Download Time
             * @description Average download time in seconds
             */
            average_download_time: number;
            /**
             * Total Bandwidth Used
             * @description Total bandwidth in bytes
             */
            total_bandwidth_used: number;
            /**
             * Popular Extractors
             * @description Most popular extractors
             */
            popular_extractors?: components["schemas"]["ExtractorStats"][];
            /**
             * Error Breakdown
             * @description Error type breakdown
             */
            error_breakdown?: components["schemas"]["ErrorBreakdown"][];
            /**
             * Peak Hour
             * @description Peak usage hour (0-23)
             * @default 0
             */
            peak_hour: number;
            /**
             * Total Storage Used
             * @description Total storage used in bytes
             * @default 0
             */
            total_storage_used: number;
        };
        /** AuthResponse */
        AuthResponse: {
            /** Accesstoken */
            accessToken: string;
            /** Refreshtoken */
            refreshToken: string;
            /**
             * Tokentype
             * @default bearer
             */
            tokenType: string;
            user: components["schemas"]["UserResponse"];
        };
        /**
         * BatchDownloadRequest
         * @description Request model for batch downloads.
         */
        BatchDownloadRequest: {
            /**
             * Urls
             * @description List of video URLs to download
             */
            urls: string[];
            /**
             * Format
             * @description Format selection for all downloads. See GET /formats endpoint for available options. Examples: 'best', 'bestvideo+bestaudio', 'mp4'
             * @default best
             */
            format: string;
            /**
             * Download Subtitles
             * @description Whether to download subtitles for all videos
             * @default false
             */
            download_subtitles: boolean;
            /**
             * Download Thumbnail
             * @description Whether to download thumbnails for all videos
             * @default false
             */
            download_thumbnail: boolean;
            /**
             * Output Directory
             * @description Base output directory for all downloads
             */
            output_directory?: string | null;
            /**
             * Priority
             * @description Download priority
             * @default normal
             */
            priority: string;
        };
        /**
         * BatchDownloadResponse
         * @description Response model for batch download initiation.
         */
        BatchDownloadResponse: {
            /**
             * Batch Id
             * @description Unique identifier for the batch download
             */
            batch_id: string;
            /**
             * Total Downloads
             * @description Total number of downloads in the batch
             */
            total_downloads: number;
            /**
             * Status
             * @description Current batch status
             */
            status: string;
            /**
             * Downloads
             * @description List of individual download IDs
             */
            downloads: string[];
        };
        /**
         * CancelResponse
         * @description Response model for download cancellation.
         */
        CancelResponse: {
            /**
             * Download Id
             * @description Download identifier that was cancelled
             */
            download_id: string;
            /**
             * Cancelled
             * @description Whether cancellation was successful
             */
            cancelled: boolean;
            /**
             * Message
             * @description Cancellation result message
             */
            message: string;
        };
        /**
         * CleanupOrphanedResponse
         * @description Response model for cleanup orphaned downloads.
         */
        CleanupOrphanedResponse: {
            /**
             * Orphaned Count
             * @description Number of orphaned downloads found
             */
            orphaned_count: number;
            /**
             * Deleted Count
             * @description Number of orphaned downloads deleted
             */
            deleted_count: number;
            /**
             * Dry Run
             * @description Whether this was a dry run
             */
            dry_run: boolean;
            /**
             * Would Delete
             * @description Details of downloads that would be deleted (dry run only)
             */
            would_delete?: {
                [key: string]: unknown;
            }[] | null;
        };
        /**
         * CleanupRecommendation
         * @description Storage cleanup recommendation.
         */
        CleanupRecommendation: {
            /**
             * Type
             * @description Type of cleanup (old_files, failed_downloads, temp_files)
             */
            type: string;
            /**
             * Description
             * @description Human-readable description
             */
            description: string;
            /**
             * Potential Savings
             * @description Bytes that could be freed
             */
            potential_savings: number;
            /**
             * File Count
             * @description Number of files affected
             * @default 0
             */
            file_count: number;
        };
        /**
         * CleanupRequest
         * @description Request for cleanup operation.
         */
        CleanupRequest: {
            /**
             * Older Than Days
             * @description Delete files older than N days
             */
            older_than_days?: number | null;
            /**
             * Delete Failed Downloads
             * @description Delete records of failed downloads
             * @default false
             */
            delete_failed_downloads: boolean;
            /**
             * Delete Temp Files
             * @description Delete temporary download files
             * @default true
             */
            delete_temp_files: boolean;
            /**
             * Max Files To Delete
             * @description Maximum number of files to delete
             * @default 100
             */
            max_files_to_delete: number;
            /**
             * Dry Run
             * @description Preview what would be deleted without actually deleting
             * @default false
             */
            dry_run: boolean;
        };
        /**
         * CleanupResponse
         * @description Response from cleanup operation.
         */
        CleanupResponse: {
            /**
             * Files Deleted
             * @description Number of files actually deleted
             */
            files_deleted: number;
            /**
             * Space Freed
             * @description Total space freed in bytes
             */
            space_freed: number;
            /**
             * Files Previewed
             * @description Files that would be deleted (dry_run=true)
             * @default 0
             */
            files_previewed: number;
            /**
             * Errors
             * @description Errors encountered
             */
            errors?: string[];
            /**
             * Dry Run
             * @description Whether this was a dry run
             */
            dry_run: boolean;
        };
        /**
         * Configuration
         * @description Current API configuration.
         */
        Configuration: {
            /**
             * Output Template
             * @description Default output filename template
             */
            output_template: string;
            /**
             * Default Format
             * @description Default format selection
             */
            default_format: string;
            /**
             * Download Subtitles
             * @description Default subtitle download setting
             */
            download_subtitles: boolean;
            /**
             * Download Thumbnail
             * @description Default thumbnail download setting
             */
            download_thumbnail: boolean;
            /**
             * Output Directory
             * @description Default output directory
             */
            output_directory: string;
            /**
             * Max Concurrent Downloads
             * @description Maximum concurrent downloads
             */
            max_concurrent_downloads: number;
            /**
             * Retry Attempts
             * @description Number of retry attempts
             */
            retry_attempts: number;
            /**
             * Timeout
             * @description Request timeout in seconds
             */
            timeout: number;
            /**
             * Temp Directory
             * @description Temporary files directory
             */
            temp_directory: string;
            /**
             * Cleanup Enabled
             * @description Automatic cleanup enabled
             * @default true
             */
            cleanup_enabled: boolean;
            /**
             * Cleanup Older Than Days
             * @description Auto-cleanup file age threshold
             * @default 30
             */
            cleanup_older_than_days: number;
            /**
             * Rate Limit Per Minute
             * @description API rate limit per minute
             */
            rate_limit_per_minute: number;
            /**
             * Debug Mode
             * @description Debug mode enabled
             */
            debug_mode: boolean;
        };
        /**
         * ConfigurationUpdate
         * @description Configuration update request.
         */
        ConfigurationUpdate: {
            /**
             * Output Template
             * @description Default output filename template
             */
            output_template?: string | null;
            /**
             * Default Format
             * @description Default format selection
             */
            default_format?: string | null;
            /**
             * Download Subtitles
             * @description Default subtitle download setting
             */
            download_subtitles?: boolean | null;
            /**
             * Download Thumbnail
             * @description Default thumbnail download setting
             */
            download_thumbnail?: boolean | null;
            /**
             * Output Directory
             * @description Default output directory
             */
            output_directory?: string | null;
            /**
             * Max Concurrent Downloads
             * @description Maximum concurrent downloads
             */
            max_concurrent_downloads?: number | null;
            /**
             * Retry Attempts
             * @description Number of retry attempts
             */
            retry_attempts?: number | null;
            /**
             * Timeout
             * @description Request timeout in seconds
             */
            timeout?: number | null;
            /**
             * Cleanup Enabled
             * @description Automatic cleanup enabled
             */
            cleanup_enabled?: boolean | null;
            /**
             * Cleanup Older Than Days
             * @description Auto-cleanup file age threshold
             */
            cleanup_older_than_days?: number | null;
            /**
             * Rate Limit Per Minute
             * @description API rate limit per minute
             */
            rate_limit_per_minute?: number | null;
        };
        /**
         * CreateSSETokenRequest
         * @description Request to create a new SSE token.
         */
        CreateSSETokenRequest: {
            /**
             * Scope
             * @description Token scope (e.g., 'download:abc-123', 'queue', 'system')
             * @example download:abc-123
             * @example queue
             * @example system
             */
            scope: string;
            /**
             * Ttl
             * @description Token TTL in seconds (min 60s, max 3600s/1 hour)
             * @default 300
             */
            ttl: number;
        };
        /**
         * DailyStats
         * @description Daily statistics.
         */
        DailyStats: {
            /**
             * Date
             * Format: date
             * @description Date
             */
            date: string;
            /**
             * Downloads
             * @description Number of downloads
             */
            downloads: number;
            /**
             * Success Rate
             * @description Success rate (0.0 to 1.0)
             */
            success_rate: number;
            /**
             * Total Size
             * @description Total bytes downloaded
             * @default 0
             */
            total_size: number;
        };
        /**
         * DeleteFilesRequest
         * @description Request model for file deletion.
         */
        DeleteFilesRequest: {
            /**
             * Files
             * @description List of file paths to delete
             */
            files: string[];
            /**
             * Confirm
             * @description Confirmation for destructive operation
             * @default false
             */
            confirm: boolean;
        };
        /**
         * DeleteFilesResponse
         * @description Response model for file deletion.
         */
        DeleteFilesResponse: {
            /**
             * Deleted Files
             * @description Number of files successfully deleted
             */
            deleted_files: number;
            /**
             * Failed Deletions
             * @description List of files that could not be deleted
             */
            failed_deletions?: string[];
            /**
             * Total Freed Space
             * @description Total bytes freed by deletion
             */
            total_freed_space: number;
        };
        /**
         * DownloadHistory
         * @description Complete download history with statistics.
         */
        DownloadHistory: {
            /**
             * Total Downloads
             * @description Total number of downloads
             */
            total_downloads: number;
            /**
             * Success Rate
             * @description Overall success rate (0.0 to 1.0)
             */
            success_rate: number;
            /**
             * Average Download Time
             * @description Average download time in seconds
             */
            average_download_time: number;
            /**
             * Total Size
             * @description Total bytes downloaded
             * @default 0
             */
            total_size: number;
            /**
             * Popular Extractors
             * @description Most used extractors
             */
            popular_extractors?: components["schemas"]["PopularExtractor"][];
            /**
             * Daily Stats
             * @description Daily breakdown
             */
            daily_stats?: components["schemas"]["DailyStats"][];
            /**
             * Items
             * @description Individual history items
             */
            items?: components["schemas"]["HistoryItem"][];
            /**
             * Total Items
             * @description Total number of items matching filters
             */
            total_items: number;
            /**
             * Page
             * @description Current page number
             * @default 1
             */
            page: number;
            /**
             * Per Page
             * @description Items per page
             * @default 20
             */
            per_page: number;
        };
        /**
         * DownloadProgress
         * @description Download progress information.
         */
        DownloadProgress: {
            /**
             * Percentage
             * @description Download percentage (0-100)
             */
            percentage?: number | null;
            /**
             * Status
             * @description Current progress status
             */
            status?: string | null;
            /**
             * Downloaded Bytes
             * @description Number of bytes downloaded
             */
            downloaded_bytes?: number | null;
            /**
             * Total Bytes
             * @description Total bytes to download
             */
            total_bytes?: number | null;
            /**
             * Speed
             * @description Download speed in bytes per second
             */
            speed?: number | null;
            /**
             * Eta
             * @description Estimated time remaining in seconds
             */
            eta?: number | null;
        };
        /**
         * DownloadQueue
         * @description Response model for download queue information.
         */
        DownloadQueue: {
            /**
             * Total Items
             * @description Total number of items in queue
             */
            total_items: number;
            /**
             * Pending
             * @description Number of pending downloads
             */
            pending: number;
            /**
             * Active
             * @description Number of active downloads
             */
            active: number;
            /**
             * Completed
             * @description Number of completed downloads
             */
            completed: number;
            /**
             * Failed
             * @description Number of failed downloads
             */
            failed: number;
            /**
             * Items
             * @description List of download items in the queue
             */
            items: components["schemas"]["DownloadStatus"][];
        };
        /**
         * DownloadRequest
         * @description Request model for starting a download.
         */
        DownloadRequest: {
            /**
             * Url
             * @description Video URL to download
             */
            url: string;
            /**
             * Format
             * @description Format selection specification. Examples: 'best', 'worst', 'bestvideo+bestaudio', 'mp4', 'bestaudio', 'bestvideo[height<=720]+bestaudio', or specific format IDs like '137+140'. See GET /formats endpoint for all available options and detailed descriptions.
             * @default best
             * @example best
             * @example best
             * @example bestvideo+bestaudio
             * @example bestvideo[height<=1080]+bestaudio
             * @example bestaudio[ext=m4a]
             * @example mp4
             */
            format: string;
            /**
             * Output Template
             * @description Output filename template
             */
            output_template?: string | null;
            /**
             * Download Subtitles
             * @description Whether to download subtitles
             * @default false
             */
            download_subtitles: boolean;
            /**
             * Download Thumbnail
             * @description Whether to download thumbnail
             * @default false
             */
            download_thumbnail: boolean;
            /**
             * Subtitle Languages
             * @description List of subtitle languages to download
             */
            subtitle_languages?: string[] | null;
            /**
             * Output Directory
             * @description Custom output directory
             */
            output_directory?: string | null;
            /**
             * Metadata
             * @description Additional metadata for the download
             */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Cookies
             * @description Custom cookies to use for the download
             */
            cookies?: {
                [key: string]: string;
            } | null;
            /**
             * Cookie File
             * @description Path to cookie file for authentication
             */
            cookie_file?: string | null;
            /**
             * Browser Cookies
             * @description Browser cookie extraction settings
             */
            browser_cookies?: {
                [key: string]: string;
            } | null;
        };
        /**
         * DownloadResponse
         * @description Response model for download initiation.
         */
        DownloadResponse: {
            /**
             * Download Id
             * @description Unique identifier for this download
             */
            download_id: string;
            /**
             * Status
             * @description Current download status
             */
            status: string;
            /**
             * Message
             * @description Status message
             */
            message: string;
            /**
             * Estimated Completion
             * @description Estimated completion time
             */
            estimated_completion?: string | null;
        };
        /**
         * DownloadResult
         * @description Final video information when download is completed.
         */
        DownloadResult: {
            /**
             * Url
             * @description Original video URL
             */
            url?: string | null;
            /**
             * Title
             * @description Video title
             */
            title?: string | null;
            /**
             * File Size
             * @description File size in bytes
             */
            file_size?: number | null;
            /**
             * Duration
             * @description Video duration in seconds
             */
            duration?: number | null;
            /**
             * Thumbnail Url
             * @description Thumbnail URL
             */
            thumbnail_url?: string | null;
            /**
             * Extractor
             * @description Extractor used (youtube, vimeo, etc)
             */
            extractor?: string | null;
            /**
             * Description
             * @description Video description
             */
            description?: string | null;
        };
        /**
         * DownloadStatus
         * @description Response model for download status.
         */
        DownloadStatus: {
            /**
             * Download Id
             * @description Unique download identifier
             */
            download_id: string;
            /**
             * Status
             * @description Current download status
             */
            status: string;
            /** @description Progress information */
            progress?: components["schemas"]["DownloadProgress"] | null;
            /**
             * Current Filename
             * @description Current output filename being written
             */
            current_filename?: string | null;
            /**
             * Message
             * @description Current status message
             */
            message: string;
            /**
             * Error
             * @description Error message if failed
             */
            error?: string | null;
            /** @description Final video information when completed */
            result?: components["schemas"]["DownloadResult"] | null;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when download was created
             */
            created_at: string;
        };
        /**
         * DownloadedFile
         * @description Model for downloaded file information.
         */
        DownloadedFile: {
            /**
             * Filename
             * @description Original filename
             */
            filename: string;
            /**
             * Filepath
             * @description Full file path
             */
            filepath: string;
            /**
             * Size
             * @description File size in bytes
             */
            size: number;
            /**
             * Created At
             * Format: date-time
             * @description File creation timestamp
             */
            created_at: string;
            /**
             * Modified At
             * @description File modification timestamp
             */
            modified_at?: string | null;
            /**
             * Video Info
             * @description Associated video information
             */
            video_info?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ErrorBreakdown
         * @description Error type breakdown.
         */
        ErrorBreakdown: {
            /**
             * Error Type
             * @description Error type/category
             */
            error_type: string;
            /**
             * Count
             * @description Number of occurrences
             */
            count: number;
            /**
             * Percentage
             * @description Percentage of failures
             */
            percentage: number;
        };
        /**
         * ExtractorStats
         * @description Extractor usage statistics.
         */
        ExtractorStats: {
            /**
             * Extractor
             * @description Extractor name
             */
            extractor: string;
            /**
             * Count
             * @description Number of uses
             */
            count: number;
            /**
             * Percentage
             * @description Percentage of total
             */
            percentage: number;
        };
        /**
         * FileList
         * @description Response model for file listing.
         */
        FileList: {
            /**
             * Total Files
             * @description Total number of files found
             */
            total_files: number;
            /**
             * Total Size
             * @description Total size of all files in bytes
             */
            total_size: number;
            /**
             * Files
             * @description List of downloaded files
             */
            files: components["schemas"]["DownloadedFile"][];
        };
        /**
         * FormatDetail
         * @description Detailed format information.
         */
        FormatDetail: {
            /**
             * Format Id
             * @description Format identifier
             */
            format_id?: string | null;
            /**
             * Ext
             * @description File extension
             */
            ext?: string | null;
            /**
             * Resolution
             * @description Video resolution
             */
            resolution?: string | null;
            /**
             * Fps
             * @description Frames per second
             */
            fps?: number | null;
            /**
             * Vcodec
             * @description Video codec
             */
            vcodec?: string | null;
            /**
             * Acodec
             * @description Audio codec
             */
            acodec?: string | null;
            /**
             * Tbr
             * @description Total bitrate
             */
            tbr?: number | null;
            /**
             * Filesize
             * @description File size in bytes
             */
            filesize?: number | null;
            /**
             * Format Note
             * @description Format description
             */
            format_note?: string | null;
        };
        /**
         * FormatInfo
         * @description Information about supported formats and quality options.
         * @example {
         *       "audio_formats": [
         *         "mp3",
         *         "m4a",
         *         "ogg",
         *         "flac"
         *       ],
         *       "format_notes": {
         *         "best": "Select the best quality format (video+audio)",
         *         "bestaudio": "Best audio-only stream"
         *       },
         *       "quality_options": [
         *         "best",
         *         "worst",
         *         "bestvideo+bestaudio",
         *         "bestaudio"
         *       ],
         *       "resolution_options": [
         *         "360p",
         *         "480p",
         *         "720p",
         *         "1080p",
         *         "2160p"
         *       ],
         *       "subtitle_formats": [
         *         "vtt",
         *         "srt",
         *         "ass"
         *       ],
         *       "video_formats": [
         *         "mp4",
         *         "webm",
         *         "mkv",
         *         "avi"
         *       ]
         *     }
         */
        FormatInfo: {
            /**
             * Video Formats
             * @description Supported video format extensions
             * @example [
             *       "mp4",
             *       "webm",
             *       "mkv",
             *       "avi",
             *       "flv",
             *       "mov"
             *     ]
             */
            video_formats: string[];
            /**
             * Audio Formats
             * @description Supported audio format extensions
             * @example [
             *       "mp3",
             *       "m4a",
             *       "ogg",
             *       "flac",
             *       "wav",
             *       "aac"
             *     ]
             */
            audio_formats: string[];
            /**
             * Subtitle Formats
             * @description Supported subtitle format extensions
             * @example [
             *       "vtt",
             *       "srt",
             *       "ass",
             *       "sub"
             *     ]
             */
            subtitle_formats: string[];
            /**
             * Quality Options
             * @description Available quality selection options
             * @example [
             *       "best",
             *       "worst",
             *       "bestvideo+bestaudio",
             *       "worstvideo+worstaudio",
             *       "bestvideo",
             *       "bestaudio"
             *     ]
             */
            quality_options: string[];
            /**
             * Resolution Options
             * @description Common video resolution options
             */
            resolution_options?: string[];
            /**
             * Format Notes
             * @description Descriptions for format selection options
             */
            format_notes?: {
                [key: string]: unknown;
            };
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HistoryItem
         * @description Individual history record.
         */
        HistoryItem: {
            /**
             * Download Id
             * @description Download identifier
             */
            download_id: string;
            /**
             * Url
             * @description Video URL
             */
            url: string;
            /**
             * Status
             * @description Final status (completed, failed, cancelled)
             */
            status: string;
            /**
             * Started At
             * Format: date-time
             * @description When download started
             */
            started_at: string;
            /**
             * Completed At
             * Format: date-time
             * @description When download finished
             */
            completed_at: string;
            /**
             * Duration
             * @description Download duration in seconds
             */
            duration: number;
            /**
             * File Size
             * @description File size in bytes
             */
            file_size?: number | null;
            /**
             * Extractor
             * @description Extractor used (e.g., youtube)
             */
            extractor: string;
            /**
             * Title
             * @description Video title
             */
            title?: string | null;
            /**
             * Error Message
             * @description Error message if failed
             */
            error_message?: string | null;
        };
        /** PasswordChange */
        PasswordChange: {
            /** Current Password */
            current_password: string;
            /** New Password */
            new_password: string;
        };
        /**
         * PlaylistEntry
         * @description Playlist entry information.
         */
        PlaylistEntry: {
            /**
             * Id
             * @description Video identifier
             */
            id: string;
            /**
             * Title
             * @description Video title
             */
            title: string;
            /**
             * Url
             * @description Video URL
             */
            url: string;
            /**
             * Duration
             * @description Duration in seconds
             */
            duration?: number | null;
            /**
             * Thumbnail
             * @description Thumbnail URL
             */
            thumbnail?: string | null;
            /**
             * Uploader
             * @description Uploader name
             */
            uploader?: string | null;
        };
        /**
         * PopularExtractor
         * @description Popular extractor statistics.
         */
        PopularExtractor: {
            /**
             * Extractor
             * @description Extractor name
             */
            extractor: string;
            /**
             * Count
             * @description Number of downloads
             */
            count: number;
            /**
             * Percentage
             * @description Percentage of total downloads
             */
            percentage: number;
        };
        /**
         * SSETokenPermission
         * @description Permissions for SSE tokens (currently only read).
         * @enum {string}
         */
        SSETokenPermission: "read";
        /**
         * SSETokenResponse
         * @description Response containing created SSE token.
         */
        SSETokenResponse: {
            /**
             * Token
             * @description The ephemeral SSE token
             */
            token: string;
            /**
             * Expires At
             * Format: date-time
             * @description Token expiration timestamp
             */
            expires_at: string;
            /**
             * Scope
             * @description Token scope
             */
            scope: string;
            /**
             * Permissions
             * @description Token permissions
             */
            permissions: components["schemas"]["SSETokenPermission"][];
            /**
             * Ttl
             * @description Time to live in seconds
             */
            ttl: number;
        };
        /**
         * StorageInfo
         * @description Storage usage information.
         */
        StorageInfo: {
            /**
             * Total Space
             * @description Total storage space in bytes
             */
            total_space: number;
            /**
             * Used Space
             * @description Used storage space in bytes
             */
            used_space: number;
            /**
             * Free Space
             * @description Free storage space in bytes
             */
            free_space: number;
            /**
             * Usage Percentage
             * @description Storage usage percentage (0-100)
             */
            usage_percentage: number;
            /**
             * Download Directory
             * @description Main download directory path
             */
            download_directory: string;
            /**
             * Temp Directory
             * @description Temporary files directory path
             */
            temp_directory: string;
            /**
             * Downloads Size
             * @description Size of downloads directory in bytes
             * @default 0
             */
            downloads_size: number;
            /**
             * Temp Size
             * @description Size of temp directory in bytes
             * @default 0
             */
            temp_size: number;
            /**
             * Cleanup Recommendations
             * @description Cleanup recommendations
             */
            cleanup_recommendations?: components["schemas"]["CleanupRecommendation"][];
        };
        /**
         * SubtitleDetail
         * @description Detailed subtitle information.
         */
        SubtitleDetail: {
            /**
             * Url
             * @description Subtitle URL
             */
            url: string;
            /**
             * Ext
             * @description Subtitle file extension
             */
            ext: string;
            /**
             * Lang
             * @description Language code
             */
            lang?: string | null;
        };
        /**
         * ThumbnailDetail
         * @description Detailed thumbnail information.
         */
        ThumbnailDetail: {
            /**
             * Url
             * @description Thumbnail URL
             */
            url: string;
            /**
             * Width
             * @description Thumbnail width
             */
            width?: number | null;
            /**
             * Height
             * @description Thumbnail height
             */
            height?: number | null;
            /**
             * Resolution
             * @description Thumbnail resolution
             */
            resolution?: string | null;
        };
        /** TokenResponse */
        TokenResponse: {
            /** Accesstoken */
            accessToken: string;
            /** Refreshtoken */
            refreshToken: string;
            /**
             * Tokentype
             * @default bearer
             */
            tokenType: string;
        };
        /** UserCreate */
        UserCreate: {
            /** Username */
            username: string;
            /** Email */
            email: string;
            /** Password */
            password: string;
        };
        /** UserLogin */
        UserLogin: {
            /** Username */
            username: string;
            /** Password */
            password: string;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: string;
            /** Username */
            username: string;
            /** Email */
            email: string;
            /** Avatar */
            avatar: string | null;
            /** Preferences */
            preferences?: {
                [key: string]: unknown;
            } | null;
            /** Created At */
            created_at: string;
            /** Last Login */
            last_login: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VideoInfo
         * @description Response model for video information.
         */
        VideoInfo: {
            /**
             * Id
             * @description Video unique identifier
             */
            id: string;
            /**
             * Title
             * @description Video title
             */
            title: string;
            /**
             * Description
             * @description Video description
             */
            description?: string | null;
            /**
             * Duration
             * @description Duration in seconds
             */
            duration?: number | null;
            /**
             * Uploader
             * @description Channel/uploader name
             */
            uploader?: string | null;
            /**
             * Upload Date
             * @description Upload date (YYYYMMDD format)
             */
            upload_date?: string | null;
            /**
             * View Count
             * @description Number of views
             */
            view_count?: number | null;
            /**
             * Webpage Url
             * @description Original webpage URL
             */
            webpage_url: string;
            /**
             * Extractor
             * @description Extractor used
             */
            extractor: string;
            /**
             * Formats
             * @description Available download formats
             */
            formats?: components["schemas"]["FormatDetail"][];
            /**
             * Thumbnails
             * @description Available thumbnails
             */
            thumbnails?: components["schemas"]["ThumbnailDetail"][];
            /**
             * Subtitles
             * @description Available subtitles by language
             */
            subtitles?: {
                [key: string]: components["schemas"]["SubtitleDetail"][];
            };
            /**
             * Playlist Count
             * @description Number of videos in playlist
             */
            playlist_count?: number | null;
            /**
             * Playlist Id
             * @description Playlist identifier
             */
            playlist_id?: string | null;
            /**
             * Playlist Title
             * @description Playlist name
             */
            playlist_title?: string | null;
            /**
             * Entries
             * @description Playlist video entries
             */
            entries?: components["schemas"]["PlaylistEntry"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_health_api_v1_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_detailed_health_api_v1_health_detailed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    extract_video_info_api_v1_info__get: {
        parameters: {
            query: {
                /** @description Video URL to extract information from */
                url: string;
                /** @description Whether to include available formats in response */
                include_formats?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_download_api_v1_download__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DownloadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_download_status_api_v1_download__download_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                download_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_download_api_v1_download__download_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                download_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_batch_download_api_v1_download_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchDownloadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchDownloadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_file_api_v1_files_download_get: {
        parameters: {
            query: {
                /** @description File path to download */
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_downloaded_files_api_v1_files__get: {
        parameters: {
            query?: {
                /** @description Filter by directory path */
                directory?: string | null;
                /** @description Filter by file extension */
                extension?: string | null;
                /** @description Minimum file size in bytes */
                min_size?: number | null;
                /** @description Maximum file size in bytes */
                max_size?: number | null;
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_downloaded_files_api_v1_files__delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteFilesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteFilesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_download_queue_api_v1_queue__get: {
        parameters: {
            query?: {
                /** @description Filter by download status */
                status?: string | null;
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadQueue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cleanup_orphaned_downloads_api_v1_queue_cleanup_orphaned_post: {
        parameters: {
            query?: {
                dry_run?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CleanupOrphanedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_formats_api_v1_formats__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormatInfo"];
                };
            };
        };
    };
    login_api_v1_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    signup_api_v1_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    refresh_token_api_v1_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_api_v1_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    update_profile_api_v1_auth_profile_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_password_api_v1_auth_change_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChange"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_api_keys_api_v1_auth_api_keys_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyListResponse"][];
                };
            };
        };
    };
    create_api_key_endpoint_api_v1_auth_api_keys_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    revoke_api_key_api_v1_auth_api_keys__api_key_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_download_history_api_v1_history__get: {
        parameters: {
            query?: {
                /** @description Start date for history query */
                start_date?: string | null;
                /** @description End date for history query */
                end_date?: string | null;
                /** @description Filter by extractor (youtube, vimeo, etc.) */
                extractor?: string | null;
                /** @description Filter by status (completed, failed, cancelled) */
                status?: string | null;
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadHistory"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_storage_info_api_v1_storage__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageInfo"];
                };
            };
        };
    };
    get_api_statistics_api_v1_stats__get: {
        parameters: {
            query?: {
                /** @description Time period for statistics (day, week, month, year) */
                period?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiStatistics"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_timeline_stats_api_v1_timeline__get: {
        parameters: {
            query?: {
                /** @description Time period (day, week, month, year) */
                period?: string;
                /** @description Start date (YYYY-MM-DD) */
                start_date?: string | null;
                /** @description End date (YYYY-MM-DD) */
                end_date?: string | null;
                /** @description Filter by extractor */
                extractor?: string | null;
                /** @description Filter by status */
                status?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyStats"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_timeline_summary_api_v1_timeline_summary_get: {
        parameters: {
            query?: {
                /** @description Time period (day, week, month, year) */
                period?: string;
                /** @description Start date (YYYY-MM-DD) */
                start_date?: string | null;
                /** @description End date (YYYY-MM-DD) */
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cleanup_downloads_api_v1_cleanup__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CleanupRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CleanupResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cleanup_expired_tokens_api_v1_cleanup_tokens_post: {
        parameters: {
            query?: {
                dry_run?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_configuration_api_v1_config__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Configuration"];
                };
            };
        };
    };
    update_configuration_api_v1_config__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfigurationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Configuration"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    event_stream_api_v1_events_stream_get: {
        parameters: {
            query?: {
                /** @description Comma-separated list of channels (download:updates,queue:updates,system:notifications) */
                channels?: string | null;
                /** @description Filter to specific download ID */
                download_id?: string | null;
                /** @description SSE token from query parameter */
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_events_api_v1_events_downloads__download_id__get: {
        parameters: {
            query?: {
                /** @description SSE token */
                token?: string | null;
            };
            header?: never;
            path: {
                download_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_events_api_v1_events_queue_get: {
        parameters: {
            query?: {
                /** @description SSE token */
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stats_events_api_v1_events_stats_get: {
        parameters: {
            query?: {
                /** @description SSE token */
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_sse_token_api_v1_events_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSSETokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSETokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sse_health_api_v1_events_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_check_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
